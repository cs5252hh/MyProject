package Alex.com;

public class Extend_vs_AbstractClass_vs_Interface {

    // Extend繼承，為is-a的概念，也就是 A 是一個 B
    // 例如劍士(A)是一位人(B) 法師(A)也是一位人(B)
    // 人就父類別 父類別擁有HP血量屬性．MP魔量屬性與攻擊的方法
    // 劍士與法師就是子類別，同時擁有HP屬性 MP屬性 與攻擊方法(每個人都有一份)


    // Abstract Class抽象類別，為is-a, but different method概念，
    // 即也就是 A 是一個 B 但可以具有不同的 C方法 與 D方法
    // 劍士(A)是一個人(B)擁有攻擊方法、法師(A)是一個人(B)也有擁有攻擊方法，
    // 但劍士與法師攻擊的方法的方法可以不同
    // 例如劍士的攻擊方法為“砍擊”(C)，法師的攻擊方法為“施放法術”(D)


    // Interface介面，為Like-as概念，即具有統一標準規範，也就是 B 有 D 這樣的統一標準規範，但內容可自定義
    // 只專注在規範本身，不專注在如何執行遵守這個規範的方法
    // 人的父類別有一個 統一標準外型規範：介面為 頭髮 鼻子 眼睛
    // 劍士是一個人(B)，可以實作這個外型規範介面(D) 但其髮色 鼻型 眼睛眼色可以自行決定
    // 例如劍士具有 飄逸長髮 鷹鉤鼻 紅色眼睛
    // 法師也是一個人(B)，可以實作這個外型規範介面(D) 但其髮色 鼻型 眼睛眼色可以自行決定
    // 例如法師具有 直髮 蒜頭鼻 藍色眼睛



}
